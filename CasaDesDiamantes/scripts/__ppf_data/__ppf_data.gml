
// Feather ignore all

// all shader uniforms used by Post-Processing FX
global.__ppf_shader_uniforms = {
	downsample_box4_res : shader_get_uniform(__PPF_SH_DS_BOX4, "u_resolution"),
	downsample_box13_res : shader_get_uniform(__PPF_SH_DS_BOX13, "u_resolution"),
	upsample_tent_res : shader_get_uniform(__PPF_SH_US_TENT9, "u_resolution"),
	gnmask_power : shader_get_uniform(__PPF_SH_GNMSK, "u_mask_power"),
	gnmask_scale : shader_get_uniform(__PPF_SH_GNMSK, "u_mask_scale"),
	gnmask_smoothness : shader_get_uniform(__PPF_SH_GNMSK, "u_mask_smoothness"),
	gnmask_texture : shader_get_sampler_index(__PPF_SH_GNMSK, "u_mask_tex"),
	mask_render_posres : shader_get_uniform(__PPF_SH_SPRMSK, "u_render_pos_res"),
	mask_render_tex : shader_get_sampler_index(__PPF_SH_SPRMSK, "u_render_tex"),
	
	base_main : {
		pos_res : shader_get_uniform(__PPF_SH_BASE, "u_pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_BASE, "u_time_n_intensity"),
		enabledd : shader_get_uniform(__PPF_SH_BASE, "u_enabled"),
	},
	color_grading : {
		pos_res : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_time_n_intensity"),
		enabledd : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_enabled"),
	},
	base_final : {
		pos_res : shader_get_uniform(__PPF_SH_FINAL, "u_pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_FINAL, "u_time_n_intensity"),
		enabledd : shader_get_uniform(__PPF_SH_FINAL, "u_enabled"),
	},
	
	rotation : {
		angle : shader_get_uniform(__PPF_SH_BASE, "u_rotation_angle"),
	},
	zoom : {
		amount : shader_get_uniform(__PPF_SH_BASE, "u_zoom_amount"),
		range : shader_get_uniform(__PPF_SH_BASE, "u_zoom_range"),
		center : shader_get_uniform(__PPF_SH_BASE, "u_zoom_center"),
	},
	shake : {
		speedd : shader_get_uniform(__PPF_SH_BASE, "u_shake_speed"),
		magnitude : shader_get_uniform(__PPF_SH_BASE, "u_shake_magnitude"),
		hspeedd : shader_get_uniform(__PPF_SH_BASE, "u_shake_hspeed"),
		vspeedd : shader_get_uniform(__PPF_SH_BASE, "u_shake_vspeed"),
	},
	lens_distortion : {
		amount : shader_get_uniform(__PPF_SH_BASE, "u_lens_distortion_amount"),
		amount_f : shader_get_uniform(__PPF_SH_FINAL, "u_lens_distortion_amount"),
		amount_c : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_lens_distortion_amount"),
		amount_d : shader_get_uniform(__PPF_SH_DOF_COC, "u_lens_distortion_amount"),
		amount_v : shader_get_uniform(__PPF_SH_VHS, "u_lens_distortion_amount"),
	},
	pixelize : {
		amount : shader_get_uniform(__PPF_SH_BASE, "u_pixelize_amount"),
		squares_max : shader_get_uniform(__PPF_SH_BASE, "u_pixelize_squares_max"),
		steps : shader_get_uniform(__PPF_SH_BASE, "u_pixelize_steps"),
	},
	swirl : {
		angle : shader_get_uniform(__PPF_SH_BASE, "u_swirl_angle"),
		radius : shader_get_uniform(__PPF_SH_BASE, "u_swirl_radius"),
		center : shader_get_uniform(__PPF_SH_BASE, "u_swirl_center"),
	},
	panorama : {
		depth_x : shader_get_uniform(__PPF_SH_BASE, "u_panorama_depth_x"),
		depth_y : shader_get_uniform(__PPF_SH_BASE, "u_panorama_depth_y"),
	},
	sine_wave : {
		frequency : shader_get_uniform(__PPF_SH_BASE, "u_sinewave_frequency"),
		amplitude : shader_get_uniform(__PPF_SH_BASE, "u_sinewave_amplitude"),
		speedd : shader_get_uniform(__PPF_SH_BASE, "u_sinewave_speed"),
		offset : shader_get_uniform(__PPF_SH_BASE, "u_sinewave_offset"),
	},
	glitch : {
		speedd : shader_get_uniform(__PPF_SH_BASE, "u_glitch_speed"),
		block_size : shader_get_uniform(__PPF_SH_BASE, "u_glitch_block_size"),
		interval : shader_get_uniform(__PPF_SH_BASE, "u_glitch_interval"),
		intensity : shader_get_uniform(__PPF_SH_BASE, "u_glitch_intensity"),
		peak_amplitude1 : shader_get_uniform(__PPF_SH_BASE, "u_glitch_peak_amplitude1"),
		peak_amplitude2 : shader_get_uniform(__PPF_SH_BASE, "u_glitch_peak_amplitude2"),
	},
	displacemap : {
		amount : shader_get_uniform(__PPF_SH_BASE, "u_displacemap_amount"),
		zoom : shader_get_uniform(__PPF_SH_BASE, "u_displacemap_zoom"),
		angle : shader_get_uniform(__PPF_SH_BASE, "u_displacemap_angle"),
		speedd : shader_get_uniform(__PPF_SH_BASE, "u_displacemap_speed"),
		texture : shader_get_sampler_index(__PPF_SH_BASE, "u_displacemap_tex"),
		offset : shader_get_uniform(__PPF_SH_BASE, "u_displacemap_offset"),
	},
	shockwaves : {
		amount : shader_get_uniform(__PPF_SH_BASE, "u_shockwaves_amount"),
		aberration : shader_get_uniform(__PPF_SH_BASE, "u_shockwaves_aberration"),
		texture : shader_get_sampler_index(__PPF_SH_BASE, "u_shockwaves_tex"),
		prisma_lut_tex : shader_get_sampler_index(__PPF_SH_BASE, "u_shockwaves_prisma_lut_tex"),
	},
	white_balance : {
		temperature : shader_get_uniform(__PPF_SH_BASE, "u_white_balance_temperature"),
		tint : shader_get_uniform(__PPF_SH_BASE, "u_white_balance_tint"),
	},
	hq4x : {
		resolution : shader_get_uniform(__PPF_SH_HQ4X, "u_resolution"),
		smoothness : shader_get_uniform(__PPF_SH_HQ4X, "u_smoothness"),
		sharpness : shader_get_uniform(__PPF_SH_HQ4X, "u_sharpness"),
	},
	fxaa : {
		resolution : shader_get_uniform(__PPF_SH_FXAA, "u_resolution"),
		strength : shader_get_uniform(__PPF_SH_FXAA, "u_fxaa_strength"),
	},
	bloom : {
		pre_filter_res : shader_get_uniform(__PPF_SH_BLOOM_PRE_FILTER, "u_resolution"),
		pre_filter_threshold : shader_get_uniform(__PPF_SH_BLOOM_PRE_FILTER, "u_bloom_threshold"),
		pre_filter_intensity : shader_get_uniform(__PPF_SH_BLOOM_PRE_FILTER, "u_bloom_intensity"),
		resolution : shader_get_uniform(__PPF_SH_BLOOM, "u_resolution"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_BLOOM, "u_time_n_intensity"),
		threshold : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_threshold"),
		intensity : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_intensity"),
		colorr : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_color"),
		white_amount : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_white_amount"),
		dirt_enable : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_dirt_enable"),
		dirt_intensity : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_dirt_intensity"),
		dirt_scale : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_dirt_scale"),
		dirt_tex : shader_get_sampler_index(__PPF_SH_BLOOM, "u_bloom_dirt_tex"),
		bloom_tex : shader_get_sampler_index(__PPF_SH_BLOOM, "u_bloom_tex"),
		debug1 : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_debug1"),
		debug2 : shader_get_uniform(__PPF_SH_BLOOM, "u_bloom_debug2"),
	},
	sunshafts : {
		resolution : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_resolution"),
		sunshaft_tex : shader_get_sampler_index(__PPF_SH_SUNSHAFTS, "u_sunshaft_tex"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_time_n_intensity"),
		position : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_position"),
		center_smoothness : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_center_smoothness"),
		threshold : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_threshold"),
		intensity : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_intensity"),
		dimmer : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_dimmer"),
		scattering : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_scattering"),
		noise_enable : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_noise_enable"),
		rays_intensity : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_rays_intensity"),
		rays_tiling : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_rays_tiling"),
		rays_speed : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_rays_speed"),
		noise_tex : shader_get_sampler_index(__PPF_SH_SUNSHAFTS, "u_sunshaft_noise_tex"),
		debug : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_sunshaft_debug"),
	},
	depth_of_field : {
		coc_bokeh_radius : shader_get_uniform(__PPF_SH_DOF_COC, "u_bokeh_radius"),
		coc_focus_distance : shader_get_uniform(__PPF_SH_DOF_COC, "u_focus_distance"),
		coc_focus_range : shader_get_uniform(__PPF_SH_DOF_COC, "u_focus_range"),
		coc_use_zdepth : shader_get_uniform(__PPF_SH_DOF_COC, "u_use_zdepth"),
		coc_zdepth_tex : shader_get_sampler_index(__PPF_SH_DOF_COC, "u_zdepth_tex"),
		_coc_lens_distortion_enable : shader_get_uniform(__PPF_SH_DOF_COC, "u_lens_distortion_enable"),
		
		bokeh_resolution : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_resolution"),
		bokeh_time_n_intensity : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_time_n_intensity"),
		bokeh_radius : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_bokeh_radius"),
		bokeh_intensity : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_bokeh_intensity"),
		bokeh_shaped : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_bokeh_shaped"),
		bokeh_blades_aperture : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_bokeh_blades_aperture"),
		bokeh_blades_angle : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_bokeh_blades_angle"),
		bokeh_debug : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_dof_debug"),
		bokeh_coc_tex : shader_get_sampler_index(__PPF_SH_DOF_BOKEH, "u_coc_tex"),
		
		final_coc_tex : shader_get_sampler_index(__PPF_SH_DOF, "u_coc_tex"),
		final_dof_tex : shader_get_sampler_index(__PPF_SH_DOF, "u_dof_tex"),
		final_downscale : shader_get_uniform(__PPF_SH_DOF, "u_downscale"),
	},
	slow_motion : {
		pre_filter_threshold : shader_get_uniform(__PPF_SH_SLOWMO_PRE_FILTER, "u_slowmo_threshold"),
		pre_filter_force : shader_get_uniform(__PPF_SH_SLOWMO_PRE_FILTER, "u_slowmo_force"),
		resolution : shader_get_uniform(__PPF_SH_SLOWMO, "u_resolution"),
		threshold : shader_get_uniform(__PPF_SH_SLOWMO, "u_slowmo_threshold"),
		debug : shader_get_uniform(__PPF_SH_SLOWMO, "u_slowmo_debug"),
		slowmo_tex : shader_get_sampler_index(__PPF_SH_SLOWMO, "u_slowmo_tex"),
	},
	motion_blur : {
		angle : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_motion_blur_direction"),
		radius : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_motion_blur_radius"),
		center : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_motion_blur_center"),
		mask_power : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_motion_blur_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_motion_blur_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_motion_blur_mask_smoothness"),
		using_overlay_texture : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_motion_blur_using_overlay_texture"),
		overlay_texture : shader_get_sampler_index(__PPF_SH_MOTION_BLUR, "u_motion_blur_overlay_tex"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_time_n_intensity"),
	},
	radial_blur : {
		u_time_n_intensity : shader_get_uniform(__PPF_SH_RADIAL_BLUR, "u_time_n_intensity"),
		radius : shader_get_uniform(__PPF_SH_RADIAL_BLUR, "u_radial_blur_radius"),
		center : shader_get_uniform(__PPF_SH_RADIAL_BLUR, "u_radial_blur_center"),
		inner : shader_get_uniform(__PPF_SH_RADIAL_BLUR, "u_radial_blur_inner"),
	},
	lut : {
		intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_lut_intensity"),
		size : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_lut_size"),
		squares : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_lut_squares"),
		tex_lookup : shader_get_sampler_index(__PPF_SH_COLOR_GRADING, "u_lut_tex"),
	},
	exposure : {
		value : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_exposure_val"),
	},
	posterization : {
		color_factor : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_posterization_col_factor"),
	},
	brightness : {
		value : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_brightness_val"),
	},
	contrast : {
		value : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_contrast_val"),
	},
	shadow_midtone_highlight : {
		shadow_color : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_shadow_color"),
		midtone_color : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_midtone_color"),
		highlight_color : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_highlight_color"),
		shadow_range : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_shadow_range"),
		highlight_range : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_highlight_range"),
	},
	saturation : {
		value : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_saturation_val"),
	},
	hue_shift : {
		hsv : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_hueshift_hsv"),
	},
	colorize : {
		hsv : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_colorize_hsv"),
		intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_colorize_intensity"),
	},
	color_tint : {
		color : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_colortint_color"),
	},
	invert_colors : {
		intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_invert_colors_intensity"),
	},
	texture_overlay : {
		intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_texture_overlay_intensity"),
		texture : shader_get_sampler_index(__PPF_SH_COLOR_GRADING, "u_texture_overlay_tex"),
		zoom : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_texture_overlay_zoom"),
	},
	lift_gamma_gain : {
		lift : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_lift_rgb"),
		gamma : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_gamma_rgb"),
		gain : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_gain_rgb"),
	},
	tone_mapping : {
		mode : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_tone_mapping_mode"),
	},
	palette_swap : {
		u_time_n_intensity : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "u_time_n_intensity"),
		row : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "u_palette_swap_row"),
		pal_height : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "u_palette_swap_height"),
		threshold : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "u_palette_swap_threshold"),
		flip : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "u_palette_swap_flip"),
		texture : shader_get_sampler_index(__PPF_SH_PALETTE_SWAP, "u_palette_swap_tex"),
	},
	kawase_blur : {
		u_time_n_intensity : shader_get_uniform(__PPF_SH_KAWASE_BLUR, "u_time_n_intensity"),
		mask_power : shader_get_uniform(__PPF_SH_KAWASE_BLUR, "u_kawase_blur_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_KAWASE_BLUR, "u_kawase_blur_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_KAWASE_BLUR, "u_kawase_blur_mask_smoothness"),
		blur_tex : shader_get_sampler_index(__PPF_SH_KAWASE_BLUR, "u_kawase_blur_tex"),
	},
	gaussian_blur : {
		resolution : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "u_resolution"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "u_time_n_intensity"),
		amount : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "u_gaussian_blur_amount"),
	},
	vhs : {
		_lens_distortion_enable : shader_get_uniform(__PPF_SH_VHS, "u_lens_distortion_enable"),
		pos_res : shader_get_uniform(__PPF_SH_VHS, "u_pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_VHS, "u_time_n_intensity"),
		chromatic_aberration : shader_get_uniform(__PPF_SH_VHS, "u_vhs_chromatic_aberration"),
		scan_aberration : shader_get_uniform(__PPF_SH_VHS, "u_vhs_scan_aberration"),
		grain_intensity : shader_get_uniform(__PPF_SH_VHS, "u_vhs_grain_intensity"),
		grain_height : shader_get_uniform(__PPF_SH_VHS, "u_vhs_grain_height"),
		grain_fade : shader_get_uniform(__PPF_SH_VHS, "u_vhs_grain_fade"),
		grain_amount : shader_get_uniform(__PPF_SH_VHS, "u_vhs_grain_amount"),
		grain_speed : shader_get_uniform(__PPF_SH_VHS, "u_vhs_grain_speed"),
		grain_interval : shader_get_uniform(__PPF_SH_VHS, "u_vhs_grain_interval"),
		scan_speed : shader_get_uniform(__PPF_SH_VHS, "u_vhs_scan_speed"),
		scan_size : shader_get_uniform(__PPF_SH_VHS, "u_vhs_scan_size"),
		scan_offset : shader_get_uniform(__PPF_SH_VHS, "u_vhs_scan_offset"),
		hscan_offset : shader_get_uniform(__PPF_SH_VHS, "u_vhs_hscan_offset"),
		flickering_intensity : shader_get_uniform(__PPF_SH_VHS, "u_vhs_flickering_intensity"),
		flickering_speed : shader_get_uniform(__PPF_SH_VHS, "u_vhs_flickering_speed"),
		wiggle_amplitude : shader_get_uniform(__PPF_SH_VHS, "u_vhs_wiggle_amplitude"),
	},
	chromatic_aberration : {
		pos_res : shader_get_uniform(__PPF_SH_CHROMABER, "u_pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_CHROMABER, "u_time_n_intensity"),
		angle : shader_get_uniform(__PPF_SH_CHROMABER, "u_chromaber_direction"),
		intensity : shader_get_uniform(__PPF_SH_CHROMABER, "u_chromaber_intensity"),
		only_outer : shader_get_uniform(__PPF_SH_CHROMABER, "u_chromaber_only_outer"),
		center_radius : shader_get_uniform(__PPF_SH_CHROMABER, "u_chromaber_center_radius"),
		blur_enable : shader_get_uniform(__PPF_SH_CHROMABER, "u_chromaber_blur_enable"),
		prisma_lut_tex : shader_get_sampler_index(__PPF_SH_CHROMABER, "u_chromaber_prisma_lut"),
	},
	dithering : {
		bayer_texture : shader_get_sampler_index(__PPF_SH_FINAL, "u_dither_bayer_tex"),
		threshold : shader_get_uniform(__PPF_SH_FINAL, "u_dither_threshold"),
		strength : shader_get_uniform(__PPF_SH_FINAL, "u_dither_strength"),
		mode : shader_get_uniform(__PPF_SH_FINAL, "u_dither_mode"),
		scale : shader_get_uniform(__PPF_SH_FINAL, "u_dither_scale"),
		bayer_size : shader_get_uniform(__PPF_SH_FINAL, "u_dither_bayer_size"),
	},
	noise_grain : {
		intensity : shader_get_uniform(__PPF_SH_FINAL, "u_noise_grain_intensity"),
		luminosity : shader_get_uniform(__PPF_SH_FINAL, "u_noise_grain_luminosity"),
		scale : shader_get_uniform(__PPF_SH_FINAL, "u_noise_grain_scale"),
		speedd : shader_get_uniform(__PPF_SH_FINAL, "u_noise_grain_speed"),
		mix : shader_get_uniform(__PPF_SH_FINAL, "u_noise_grain_mix"),
		noise_tex : shader_get_sampler_index(__PPF_SH_FINAL, "u_noise_grain_tex"),
	},
	mist : {
		intensity : shader_get_uniform(__PPF_SH_FINAL, "u_mist_intensity"),
		scale : shader_get_uniform(__PPF_SH_FINAL, "u_mist_scale"),
		tiling : shader_get_uniform(__PPF_SH_FINAL, "u_mist_tiling"),
		speedd : shader_get_uniform(__PPF_SH_FINAL, "u_mist_speed"),
		angle : shader_get_uniform(__PPF_SH_FINAL, "u_mist_angle"),
		contrast : shader_get_uniform(__PPF_SH_FINAL, "u_mist_contrast"),
		powerr : shader_get_uniform(__PPF_SH_FINAL, "u_mist_power"),
		remap : shader_get_uniform(__PPF_SH_FINAL, "u_mist_remap"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "u_mist_color"),
		mix : shader_get_uniform(__PPF_SH_FINAL, "u_mist_mix"),
		mix_threshold : shader_get_uniform(__PPF_SH_FINAL, "u_mist_mix_threshold"),
		noise_tex : shader_get_sampler_index(__PPF_SH_FINAL, "u_mist_noise_tex"),
		offset : shader_get_uniform(__PPF_SH_FINAL, "u_mist_offset"),
		fade_amount : shader_get_uniform(__PPF_SH_FINAL, "u_mist_fade_amount"),
		fade_angle : shader_get_uniform(__PPF_SH_FINAL, "u_mist_fade_angle"),
	},
	speedlines : {
		scale : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_scale"),
		tiling : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_tiling"),
		speedd : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_speed"),
		rot_speed : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_rot_speed"),
		contrast : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_contrast"),
		powerr : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_power"),
		remap : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_remap"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_color"),
		mask_power : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_FINAL, "u_speedlines_mask_smoothness"),
		noise_tex : shader_get_sampler_index(__PPF_SH_FINAL, "u_speedlines_noise_tex"),
	},
	vignette : {
		intensity : shader_get_uniform(__PPF_SH_FINAL, "u_vignette_intensity"),
		curvature : shader_get_uniform(__PPF_SH_FINAL, "u_vignette_curvature"),
		inner : shader_get_uniform(__PPF_SH_FINAL, "u_vignette_inner"),
		outer : shader_get_uniform(__PPF_SH_FINAL, "u_vignette_outer"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "u_vignette_color"),
		center : shader_get_uniform(__PPF_SH_FINAL, "u_vignette_center"),
		rounded : shader_get_uniform(__PPF_SH_FINAL, "u_vignette_rounded"),
		linear : shader_get_uniform(__PPF_SH_FINAL, "u_vignette_linear"),
	},
	nes_fade : {
		amount : shader_get_uniform(__PPF_SH_FINAL, "u_nes_fade_amount"),
		levels : shader_get_uniform(__PPF_SH_FINAL, "u_nes_fade_levels"),
	},
	scanlines : {
		intensity : shader_get_uniform(__PPF_SH_FINAL, "u_scanlines_intensity"),
		speedd : shader_get_uniform(__PPF_SH_FINAL, "u_scanlines_speed"),
		amount : shader_get_uniform(__PPF_SH_FINAL, "u_scanlines_amount"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "u_scanlines_color"),
		mask_power : shader_get_uniform(__PPF_SH_FINAL, "u_scanlines_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_FINAL, "u_scanlines_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_FINAL, "u_scanlines_mask_smoothness"),
	},
	fade : {
		amount : shader_get_uniform(__PPF_SH_FINAL, "u_fade_amount"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "u_fade_color"),
	},
	cinema_bars : {
		amount : shader_get_uniform(__PPF_SH_FINAL, "u_cinema_bars_amount"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "u_cinema_bars_color"),
		vertical_enable : shader_get_uniform(__PPF_SH_FINAL, "u_cinema_bars_vertical_enable"),
		horizontal_enable : shader_get_uniform(__PPF_SH_FINAL, "u_cinema_bars_horizontal_enable"),
		is_fixed : shader_get_uniform(__PPF_SH_FINAL, "u_cinema_bars_is_fixed"),
	},
	color_blindness : {
		mode : shader_get_uniform(__PPF_SH_FINAL, "u_color_blindness_mode"),
	},
	channels : {
		rgb : shader_get_uniform(__PPF_SH_FINAL, "u_channel_rgb"),
	},
	border : {
		curvature_f : shader_get_uniform(__PPF_SH_FINAL, "u_border_curvature"),
		smooth_f : shader_get_uniform(__PPF_SH_FINAL, "u_border_smooth"),
		colorr_f : shader_get_uniform(__PPF_SH_FINAL, "u_border_color"),
		curvature_c : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_border_curvature"),
		smooth_c : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_border_smooth"),
		colorr_c : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_border_color"),
	},
}


// all textures used by Post-Processing FX
global.__ppf_shader_textures = {
	pixel_texture : sprite_get_texture(__spr_ppf_pixel, 0),
	empty_texture : sprite_get_texture(__spr_ppf_empty, 0),
	noise_point : sprite_get_texture(__spr_ppf_noise_point, 0),
	noise_perlin : sprite_get_texture(__spr_ppf_noise_perlin, 0),
	noise_simplex : sprite_get_texture(__spr_ppf_noise_simplex, 0),
	default_normal : sprite_get_texture(__spr_ppf_normal, 0),
	default_palette : sprite_get_texture(__spr_ppf_pal_default, 0),
	default_lut3d : sprite_get_texture(__spr_ppf_lut3d_default, 0),
	default_dirt_lens : sprite_get_texture(__spr_ppf_dirt_lens, 0),
	default_overlay_tex : sprite_get_texture(__spr_ppf_blood, 0),
	default_chromaber_prisma_lut : sprite_get_texture(__spr_ppf_prism_lut_rb, 0),
	default_shockwaves_prisma_lut : sprite_get_texture(__spr_ppf_prism_lut_cp, 0),
	bayer_16x16 : sprite_get_texture(__spr_ppf_bayer16x16, 0),
	bayer_8x8 : sprite_get_texture(__spr_ppf_bayer8x8, 0),
	bayer_4x4 : sprite_get_texture(__spr_ppf_bayer4x4, 0),
	bayer_2x2 : sprite_get_texture(__spr_ppf_bayer2x2, 0),
}

#macro __PPF_SU global.__ppf_shader_uniforms
#macro __PPF_ST global.__ppf_shader_textures
